import logging
import os
import re
import socket
import sys

def send_file(s, filename):
    if filename != "":
        with open(filename, "rb") as f:
            data = f.read()
        logging.debug("Sending binary data of size %d" % len(data))
        s.sendall(data)

def find_replay_files():
    """
    Find the list of filenames to replay generated by extract_reqs.py

    Filenames should be in req_xxxx_client.bin or req_xxxx_server.bin
    """
    filelist = []
    for filename in os.listdir(os.getcwd()):
        if re.match(r"req_[0-9]{4}_(client|server)\.bin", filename) is not None:
            filelist.append(filename)

    return filelist

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    # Get the list of files to replay in the same directory
    replay_files = find_replay_files()
    replay_files.sort()

    # Create a TCP/IP socket
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:

        # Connect to port
        logging.info("Starting connection")
        sock.connect(("127.0.0.1", 8345))

        for rf in replay_files:

            # Send the client request
            if "client" in rf:
                send_file(sock, rf)
                continue

            # Else receive data based on the server response size
            recv_size = os.stat(rf).st_size
            data = sock.recv(recv_size)

            if data:
                logging.debug("Recv data: %s" % data)

                with open(rf, "rb") as f:
                    expected_data = f.read()

                if data != expected_data:
                    logging.info("Recv data does not match expected data: %s" % expected_data)
