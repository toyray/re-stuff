Starting in 16 bit Real mode
0x0:	mov	sp, 0x8000
0x3:	cli
0x4:	lgdt	[0xd26]
0x9:	mov	eax, cr0
0xc:	or	eax, 1
0x10:	mov	cr0, eax
0x13:	ljmp	8:0x18

Switching to 32 bit Protected Mode ...
0x18:	mov	ax, 0x10
0x1c:	mov	ds, eax
0x1e:	mov	fs, eax
0x20:	mov	gs, eax
0x22:	mov	ss, eax
0x24:	call	0x37
0x29:	lgdt	[0xd44]
0x30:	ljmp	8:0xcf2
0x37:	mov	edi, 0x3000
0x3c:	mov	cr3, edi
0x3f:	xor	eax, eax
0x41:	mov	ecx, 0x1000
0x46:	rep stosd	dword ptr es:[edi], eax
0x48:	mov	eax, cr3
0x4b:	mov	dword ptr [eax], 0x4003
0x51:	add	eax, 0x1000
0x56:	mov	dword ptr [eax], 0x5003
0x5c:	add	eax, 0x1000
0x61:	mov	dword ptr [eax], 0x6003
0x67:	add	eax, 0x1000
0x6c:	mov	ebx, 3
0x71:	mov	ecx, 0x200
0x76:	mov	dword ptr [eax], ebx
0x78:	add	eax, 8
0x7b:	add	ebx, 0x1000
0x81:	loop	0x76
0x83:	mov	ecx, 0xc0000080
0x88:	rdmsr
0x8a:	or	eax, 0x100
0x8f:	wrmsr
0x91:	mov	edi, cr4
0x94:	or	edi, 0x20
0x97:	mov	cr4, edi
0x9a:	mov	edi, cr0
0x9d:	or	edi, 0x80000000
0xa3:	mov	cr0, edi
0xa6:	ret

Switching to 64 bit Long Mode ...
0xcf2:	mov	ax, 0x10
0xcf6:	mov	ds, eax
0xcf8:	mov	fs, eax
0xcfa:	mov	gs, eax
0xcfc:	mov	ss, eax
0xcfe:	movabs	rax, 0xdeadbeefdeadbeef
0xd08:	call	0xbb2
0xd0d:	hlt
0xd0e:	add	byte ptr [rax], al
0xd10:	add	byte ptr [rax], al
0xd12:	add	byte ptr [rax], al
0xd14:	add	byte ptr [rax], al
Aborting, no more code found
